
uart_msg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001658  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080017e8  080017e8  000027e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001918  08001918  00003058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001918  08001918  00003058  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001918  08001918  00003058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001918  08001918  00002918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800191c  0800191c  0000291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08001920  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003058  2**0
                  CONTENTS
 10 .bss          00003eb0  20000058  20000058  00003058  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003f08  20003f08  00003058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c79  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d40  00000000  00000000  00006d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000398  00000000  00000000  00007a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002ad  00000000  00000000  00007de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002295  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003f1f  00000000  00000000  0000a322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092f20  00000000  00000000  0000e241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a1161  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001008  00000000  00000000  000a11a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000a21ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  000a21d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080017d0 	.word	0x080017d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	080017d0 	.word	0x080017d0

080001d0 <vAperiodicTask>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void vAperiodicTask(void * pvParam){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b086      	sub	sp, #24
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	char str[16];

	for ( ; ;)
	{
		  while(1) {
		   		UartGets(str);
 80001d8:	f107 0308 	add.w	r3, r7, #8
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 f905 	bl	80003ec <UartGets>
		   		strupr(str);
 80001e2:	f107 0308 	add.w	r3, r7, #8
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fa06 	bl	80015f8 <strupr>
		   		UartPuts(str);
 80001ec:	f107 0308 	add.w	r3, r7, #8
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f8df 	bl	80003b4 <UartPuts>
		   		UartGets(str);
 80001f6:	bf00      	nop
 80001f8:	e7ee      	b.n	80001d8 <vAperiodicTask+0x8>
	...

080001fc <main>:
	}
	vTaskDelete(NULL);

}
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af02      	add	r7, sp, #8
	UartInit(9600);
 8000202:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000206:	f000 f857 	bl	80002b8 <UartInit>
	UartPuts("Enter Strings\r\n");
 800020a:	4808      	ldr	r0, [pc, #32]	@ (800022c <main+0x30>)
 800020c:	f000 f8d2 	bl	80003b4 <UartPuts>
   xTaskCreate(vAperiodicTask,"AperiodicTask", configMINIMAL_STACK_SIZE,NULL,4,NULL);
 8000210:	2300      	movs	r3, #0
 8000212:	9301      	str	r3, [sp, #4]
 8000214:	2304      	movs	r3, #4
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2300      	movs	r3, #0
 800021a:	2280      	movs	r2, #128	@ 0x80
 800021c:	4904      	ldr	r1, [pc, #16]	@ (8000230 <main+0x34>)
 800021e:	4805      	ldr	r0, [pc, #20]	@ (8000234 <main+0x38>)
 8000220:	f000 f9ae 	bl	8000580 <xTaskCreate>

   vTaskStartScheduler();
 8000224:	f000 fafe 	bl	8000824 <vTaskStartScheduler>

   while(1);
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <main+0x2c>
 800022c:	080017e8 	.word	0x080017e8
 8000230:	080017f8 	.word	0x080017f8
 8000234:	080001d1 	.word	0x080001d1

08000238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800023c:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <SystemInit+0x1c>)
 800023e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000242:	4a04      	ldr	r2, [pc, #16]	@ (8000254 <SystemInit+0x1c>)
 8000244:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000248:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 800024c:	f000 f804 	bl	8000258 <DWT_Init>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800025c:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <DWT_Init+0x58>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a13      	ldr	r2, [pc, #76]	@ (80002b0 <DWT_Init+0x58>)
 8000262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000266:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <DWT_Init+0x58>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a10      	ldr	r2, [pc, #64]	@ (80002b0 <DWT_Init+0x58>)
 800026e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000272:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000274:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <DWT_Init+0x5c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0e      	ldr	r2, [pc, #56]	@ (80002b4 <DWT_Init+0x5c>)
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000280:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <DWT_Init+0x5c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0b      	ldr	r2, [pc, #44]	@ (80002b4 <DWT_Init+0x5c>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <DWT_Init+0x5c>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000292:	bf00      	nop
    __ASM volatile ("NOP");
 8000294:	bf00      	nop
    __ASM volatile ("NOP");
 8000296:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DWT_Init+0x5c>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	2b00      	cmp	r3, #0
 800029e:	bf0c      	ite	eq
 80002a0:	2301      	moveq	r3, #1
 80002a2:	2300      	movne	r3, #0
 80002a4:	b2db      	uxtb	r3, r3
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	e000edf0 	.word	0xe000edf0
 80002b4:	e0001000 	.word	0xe0001000

080002b8 <UartInit>:
 *      Author: admin
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	/* GPIO config */
	// enable gpio clock
	//RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002c0:	4b24      	ldr	r3, [pc, #144]	@ (8000354 <UartInit+0x9c>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c4:	4a23      	ldr	r2, [pc, #140]	@ (8000354 <UartInit+0x9c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio - no pull up & no pull down
	GPIOA->PUPDR &= ~(BV(2*2+1) | BV(2*2) | BV(2*3+1) | BV(2*3));
 80002cc:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <UartInit+0xa0>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	4a21      	ldr	r2, [pc, #132]	@ (8000358 <UartInit+0xa0>)
 80002d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002d6:	60d3      	str	r3, [r2, #12]
	// set gpio (PA2, PA3) mode as alt fn = 10
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 80002d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000358 <UartInit+0xa0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000358 <UartInit+0xa0>)
 80002de:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(2*2) | BV(2*3));
 80002e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <UartInit+0xa0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <UartInit+0xa0>)
 80002ea:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80002ee:	6013      	str	r3, [r2, #0]
	// set gpio (PA2, PA3) pin alt fn as uart (AF7) -- AFRL = AFR[0], AFRH = AFR[1]
	GPIOA->AFR[0] = (7 << (2*4)) | (7 << (3*4));
 80002f0:	4b19      	ldr	r3, [pc, #100]	@ (8000358 <UartInit+0xa0>)
 80002f2:	f44f 42ee 	mov.w	r2, #30464	@ 0x7700
 80002f6:	621a      	str	r2, [r3, #32]
	/* UART config */
	// enable UART2 clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002f8:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <UartInit+0x9c>)
 80002fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002fc:	4a15      	ldr	r2, [pc, #84]	@ (8000354 <UartInit+0x9c>)
 80002fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000302:	6413      	str	r3, [r2, #64]	@ 0x40
	// UART2 config (8N1) = 8-bit data transfer=0, disable parity=0, tx en=1, rx en=1
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <UartInit+0xa4>)
 8000306:	220c      	movs	r2, #12
 8000308:	60da      	str	r2, [r3, #12]
	// baud rate setting
	if(baud == 9600)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000310:	d104      	bne.n	800031c <UartInit+0x64>
		USART2->BRR = 0x0683;
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <UartInit+0xa4>)
 8000314:	f240 6283 	movw	r2, #1667	@ 0x683
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	e00f      	b.n	800033c <UartInit+0x84>
	else if(baud == 38400)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000322:	d104      	bne.n	800032e <UartInit+0x76>
		USART2->BRR = 0x01A1;
 8000324:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <UartInit+0xa4>)
 8000326:	f240 12a1 	movw	r2, #417	@ 0x1a1
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	e006      	b.n	800033c <UartInit+0x84>
	else if(baud == 115200)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000334:	d102      	bne.n	800033c <UartInit+0x84>
		USART2->BRR = 0x008B;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <UartInit+0xa4>)
 8000338:	228b      	movs	r2, #139	@ 0x8b
 800033a:	609a      	str	r2, [r3, #8]
	// enable uart=1
	USART2->CR1 |= USART_CR1_UE;
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <UartInit+0xa4>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a06      	ldr	r2, [pc, #24]	@ (800035c <UartInit+0xa4>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000346:	60d3      	str	r3, [r2, #12]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	40004400 	.word	0x40004400

08000360 <UartPutch>:

void UartPutch(int ch) {
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR = ch;
 8000368:	4a08      	ldr	r2, [pc, #32]	@ (800038c <UartPutch+0x2c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6053      	str	r3, [r2, #4]
	// wait until Tx is done (until Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 800036e:	bf00      	nop
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <UartPutch+0x2c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0f9      	beq.n	8000370 <UartPutch+0x10>
		;
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40004400 	.word	0x40004400

08000390 <UartGetch>:

int UartGetch(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	// wait until data is Rx is done (until Rx regr is empty)
	while((USART2->SR & USART_SR_RXNE) == 0)
 8000394:	bf00      	nop
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <UartGetch+0x20>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f003 0320 	and.w	r3, r3, #32
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f9      	beq.n	8000396 <UartGetch+0x6>
		;
	// read char from RDR
	return USART2->DR;
 80003a2:	4b03      	ldr	r3, [pc, #12]	@ (80003b0 <UartGetch+0x20>)
 80003a4:	685b      	ldr	r3, [r3, #4]
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40004400 	.word	0x40004400

080003b4 <UartPuts>:

void UartPuts(char *str) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	e009      	b.n	80003d6 <UartPuts+0x22>
		UartPutch(str[i]);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ffc8 	bl	8000360 <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3301      	adds	r3, #1
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1ef      	bne.n	80003c2 <UartPuts+0xe>
}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <UartGets>:

void UartGets(char *str) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	int i=0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80003f8:	f7ff ffca 	bl	8000390 <UartGetch>
 80003fc:	4603      	mov	r3, r0
 80003fe:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	7afa      	ldrb	r2, [r7, #11]
 8000408:	701a      	strb	r2, [r3, #0]
		i++;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3301      	adds	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000410:	7afb      	ldrb	r3, [r7, #11]
 8000412:	2b0d      	cmp	r3, #13
 8000414:	d1f0      	bne.n	80003f8 <UartGets+0xc>
	str[i] = '\n';
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	4413      	add	r3, r2
 800041c:	220a      	movs	r2, #10
 800041e:	701a      	strb	r2, [r3, #0]
	i++;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3301      	adds	r3, #1
 8000424:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	4413      	add	r3, r2
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	@ (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f7ff fefc 	bl	8000238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	@ (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	@ (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	@ (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	@ (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f001 f937 	bl	80016d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff fec7 	bl	80001fc <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800047c:	08001920 	.word	0x08001920
  ldr r2, =_sbss
 8000480:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000484:	20003f08 	.word	0x20003f08

08000488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>

0800048a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f103 0208 	add.w	r2, r3, #8
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80004a2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f103 0208 	add.w	r2, r3, #8
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f103 0208 	add.w	r2, r3, #8
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	689a      	ldr	r2, [r3, #8]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	6892      	ldr	r2, [r2, #8]
 8000542:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	6852      	ldr	r2, [r2, #4]
 800054c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	429a      	cmp	r2, r3
 8000556:	d103      	bne.n	8000560 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689a      	ldr	r2, [r3, #8]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1e5a      	subs	r2, r3, #1
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af04      	add	r7, sp, #16
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4613      	mov	r3, r2
 800058e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fe39 	bl	800120c <pvPortMalloc>
 800059a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00e      	beq.n	80005c0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80005a2:	20a0      	movs	r0, #160	@ 0xa0
 80005a4:	f000 fe32 	bl	800120c <pvPortMalloc>
 80005a8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d003      	beq.n	80005b8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80005b6:	e005      	b.n	80005c4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80005b8:	6978      	ldr	r0, [r7, #20]
 80005ba:	f000 fef5 	bl	80013a8 <vPortFree>
 80005be:	e001      	b.n	80005c4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d013      	beq.n	80005f2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	2300      	movs	r3, #0
 80005ce:	9303      	str	r3, [sp, #12]
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	9302      	str	r3, [sp, #8]
 80005d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	68b9      	ldr	r1, [r7, #8]
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f80f 	bl	8000604 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80005e6:	69f8      	ldr	r0, [r7, #28]
 80005e8:	f000 f8b2 	bl	8000750 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
 80005f0:	e002      	b.n	80005f8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80005f8:	69bb      	ldr	r3, [r7, #24]
    }
 80005fa:	4618      	mov	r0, r3
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800061c:	3b01      	subs	r3, #1
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	f023 0307 	bic.w	r3, r3, #7
 800062a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00b      	beq.n	800064e <prvInitialiseNewTask+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800063a:	f383 8811 	msr	BASEPRI, r3
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	f3bf 8f4f 	dsb	sy
 8000646:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d01f      	beq.n	8000694 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	e012      	b.n	8000680 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	4413      	add	r3, r2
 8000660:	7819      	ldrb	r1, [r3, #0]
 8000662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	4413      	add	r3, r2
 8000668:	3334      	adds	r3, #52	@ 0x34
 800066a:	460a      	mov	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d006      	beq.n	8000688 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3301      	adds	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	2b0f      	cmp	r3, #15
 8000684:	d9e9      	bls.n	800065a <prvInitialiseNewTask+0x56>
 8000686:	e000      	b.n	800068a <prvInitialiseNewTask+0x86>
            {
                break;
 8000688:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800068a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000692:	e003      	b.n	800069c <prvInitialiseNewTask+0x98>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800069c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d901      	bls.n	80006a6 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80006a2:	2306      	movs	r3, #6
 80006a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80006a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80006ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006b0:	645a      	str	r2, [r3, #68]	@ 0x44
            pxNewTCB->uxMutexesHeld = 0;
 80006b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006b4:	2200      	movs	r2, #0
 80006b6:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80006b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006ba:	3304      	adds	r3, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff04 	bl	80004ca <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80006c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006c4:	3318      	adds	r3, #24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff feff 	bl	80004ca <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80006cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006d0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80006d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006d4:	f1c3 0207 	rsb	r2, r3, #7
 80006d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006da:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80006dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80006e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006e4:	3398      	adds	r3, #152	@ 0x98
 80006e6:	2204      	movs	r2, #4
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ff7c 	bl	80015e8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80006f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006f2:	339c      	adds	r3, #156	@ 0x9c
 80006f4:	2201      	movs	r2, #1
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 ff75 	bl	80015e8 <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80006fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000700:	334c      	adds	r3, #76	@ 0x4c
 8000702:	224c      	movs	r2, #76	@ 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ff6e 	bl	80015e8 <memset>
 800070c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800070e:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <prvInitialiseNewTask+0x140>)
 8000710:	651a      	str	r2, [r3, #80]	@ 0x50
 8000712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000714:	4a0c      	ldr	r2, [pc, #48]	@ (8000748 <prvInitialiseNewTask+0x144>)
 8000716:	655a      	str	r2, [r3, #84]	@ 0x54
 8000718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800071a:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <prvInitialiseNewTask+0x148>)
 800071c:	659a      	str	r2, [r3, #88]	@ 0x58
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	68f9      	ldr	r1, [r7, #12]
 8000722:	69b8      	ldr	r0, [r7, #24]
 8000724:	f000 fb56 	bl	8000dd4 <pxPortInitialiseStack>
 8000728:	4602      	mov	r2, r0
 800072a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800072c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800072e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <prvInitialiseNewTask+0x136>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000738:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800073a:	bf00      	nop
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20003dc8 	.word	0x20003dc8
 8000748:	20003e30 	.word	0x20003e30
 800074c:	20003e98 	.word	0x20003e98

08000750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000758:	f000 fc70 	bl	800103c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <prvAddNewTaskToReadyList+0xb8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a29      	ldr	r2, [pc, #164]	@ (8000808 <prvAddNewTaskToReadyList+0xb8>)
 8000764:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <prvAddNewTaskToReadyList+0xbc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d109      	bne.n	8000782 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800076e:	4a27      	ldr	r2, [pc, #156]	@ (800080c <prvAddNewTaskToReadyList+0xbc>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <prvAddNewTaskToReadyList+0xb8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d110      	bne.n	800079e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800077c:	f000 fa8a 	bl	8000c94 <prvInitialiseTaskLists>
 8000780:	e00d      	b.n	800079e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <prvAddNewTaskToReadyList+0xc0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d109      	bne.n	800079e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <prvAddNewTaskToReadyList+0xbc>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000794:	429a      	cmp	r2, r3
 8000796:	d802      	bhi.n	800079e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000798:	4a1c      	ldr	r2, [pc, #112]	@ (800080c <prvAddNewTaskToReadyList+0xbc>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <prvAddNewTaskToReadyList+0xc4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000814 <prvAddNewTaskToReadyList+0xc4>)
 80007a6:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ac:	2201      	movs	r2, #1
 80007ae:	409a      	lsls	r2, r3
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <prvAddNewTaskToReadyList+0xc8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <prvAddNewTaskToReadyList+0xc8>)
 80007b8:	6013      	str	r3, [r2, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4a15      	ldr	r2, [pc, #84]	@ (800081c <prvAddNewTaskToReadyList+0xcc>)
 80007c8:	441a      	add	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3304      	adds	r3, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	4610      	mov	r0, r2
 80007d2:	f7ff fe87 	bl	80004e4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80007d6:	f000 fc63 	bl	80010a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <prvAddNewTaskToReadyList+0xc0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00e      	beq.n	8000800 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <prvAddNewTaskToReadyList+0xbc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80007f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <prvAddNewTaskToReadyList+0xd0>)
 80007f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	f3bf 8f4f 	dsb	sy
 80007fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000174 	.word	0x20000174
 800080c:	20000074 	.word	0x20000074
 8000810:	20000180 	.word	0x20000180
 8000814:	20000190 	.word	0x20000190
 8000818:	2000017c 	.word	0x2000017c
 800081c:	20000078 	.word	0x20000078
 8000820:	e000ed04 	.word	0xe000ed04

08000824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800082a:	4b20      	ldr	r3, [pc, #128]	@ (80008ac <vTaskStartScheduler+0x88>)
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	2300      	movs	r3, #0
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	2280      	movs	r2, #128	@ 0x80
 8000836:	491e      	ldr	r1, [pc, #120]	@ (80008b0 <vTaskStartScheduler+0x8c>)
 8000838:	481e      	ldr	r0, [pc, #120]	@ (80008b4 <vTaskStartScheduler+0x90>)
 800083a:	f7ff fea1 	bl	8000580 <xTaskCreate>
 800083e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d11b      	bne.n	800087e <vTaskStartScheduler+0x5a>
        __asm volatile
 8000846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800084a:	f383 8811 	msr	BASEPRI, r3
 800084e:	f3bf 8f6f 	isb	sy
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	60bb      	str	r3, [r7, #8]
    }
 8000858:	bf00      	nop
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <vTaskStartScheduler+0x94>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	334c      	adds	r3, #76	@ 0x4c
 8000860:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <vTaskStartScheduler+0x98>)
 8000862:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <vTaskStartScheduler+0x9c>)
 8000866:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800086a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <vTaskStartScheduler+0xa0>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000872:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <vTaskStartScheduler+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000878:	f000 fb3c 	bl	8000ef4 <xPortStartScheduler>
 800087c:	e00f      	b.n	800089e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000884:	d10b      	bne.n	800089e <vTaskStartScheduler+0x7a>
        __asm volatile
 8000886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800088a:	f383 8811 	msr	BASEPRI, r3
 800088e:	f3bf 8f6f 	isb	sy
 8000892:	f3bf 8f4f 	dsb	sy
 8000896:	607b      	str	r3, [r7, #4]
    }
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	e7fd      	b.n	800089a <vTaskStartScheduler+0x76>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <vTaskStartScheduler+0xa8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000198 	.word	0x20000198
 80008b0:	08001808 	.word	0x08001808
 80008b4:	08000c65 	.word	0x08000c65
 80008b8:	20000074 	.word	0x20000074
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000194 	.word	0x20000194
 80008c4:	20000180 	.word	0x20000180
 80008c8:	20000178 	.word	0x20000178
 80008cc:	08001810 	.word	0x08001810

080008d0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <vTaskSuspendAll+0x18>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3301      	adds	r3, #1
 80008da:	4a03      	ldr	r2, [pc, #12]	@ (80008e8 <vTaskSuspendAll+0x18>)
 80008dc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	2000019c 	.word	0x2000019c

080008ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80008fa:	4b42      	ldr	r3, [pc, #264]	@ (8000a04 <xTaskResumeAll+0x118>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10b      	bne.n	800091a <xTaskResumeAll+0x2e>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	603b      	str	r3, [r7, #0]
    }
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800091a:	f000 fb8f 	bl	800103c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800091e:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <xTaskResumeAll+0x118>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3b01      	subs	r3, #1
 8000924:	4a37      	ldr	r2, [pc, #220]	@ (8000a04 <xTaskResumeAll+0x118>)
 8000926:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000928:	4b36      	ldr	r3, [pc, #216]	@ (8000a04 <xTaskResumeAll+0x118>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d161      	bne.n	80009f4 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000930:	4b35      	ldr	r3, [pc, #212]	@ (8000a08 <xTaskResumeAll+0x11c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d05d      	beq.n	80009f4 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000938:	e02e      	b.n	8000998 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800093a:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <xTaskResumeAll+0x120>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3318      	adds	r3, #24
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fdf0 	bl	800052c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3304      	adds	r3, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fdeb 	bl	800052c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095a:	2201      	movs	r2, #1
 800095c:	409a      	lsls	r2, r3
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <xTaskResumeAll+0x124>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4313      	orrs	r3, r2
 8000964:	4a2a      	ldr	r2, [pc, #168]	@ (8000a10 <xTaskResumeAll+0x124>)
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800096c:	4613      	mov	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4a27      	ldr	r2, [pc, #156]	@ (8000a14 <xTaskResumeAll+0x128>)
 8000976:	441a      	add	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3304      	adds	r3, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4610      	mov	r0, r2
 8000980:	f7ff fdb0 	bl	80004e4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <xTaskResumeAll+0x12c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	429a      	cmp	r2, r3
 8000990:	d302      	bcc.n	8000998 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8000992:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <xTaskResumeAll+0x130>)
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <xTaskResumeAll+0x120>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1cc      	bne.n	800093a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80009a6:	f000 f9f9 	bl	8000d9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <xTaskResumeAll+0x134>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d010      	beq.n	80009d8 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80009b6:	f000 f837 	bl	8000a28 <xTaskIncrementTick>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <xTaskResumeAll+0x130>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1f1      	bne.n	80009b6 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <xTaskResumeAll+0x134>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <xTaskResumeAll+0x130>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d009      	beq.n	80009f4 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <xTaskResumeAll+0x138>)
 80009e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	f3bf 8f4f 	dsb	sy
 80009f0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80009f4:	f000 fb54 	bl	80010a0 <vPortExitCritical>

    return xAlreadyYielded;
 80009f8:	68bb      	ldr	r3, [r7, #8]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000019c 	.word	0x2000019c
 8000a08:	20000174 	.word	0x20000174
 8000a0c:	20000134 	.word	0x20000134
 8000a10:	2000017c 	.word	0x2000017c
 8000a14:	20000078 	.word	0x20000078
 8000a18:	20000074 	.word	0x20000074
 8000a1c:	20000188 	.word	0x20000188
 8000a20:	20000184 	.word	0x20000184
 8000a24:	e000ed04 	.word	0xe000ed04

08000a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a32:	4b4f      	ldr	r3, [pc, #316]	@ (8000b70 <xTaskIncrementTick+0x148>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 808f 	bne.w	8000b5a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b74 <xTaskIncrementTick+0x14c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000a44:	4a4b      	ldr	r2, [pc, #300]	@ (8000b74 <xTaskIncrementTick+0x14c>)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d121      	bne.n	8000a94 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000a50:	4b49      	ldr	r3, [pc, #292]	@ (8000b78 <xTaskIncrementTick+0x150>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00b      	beq.n	8000a72 <xTaskIncrementTick+0x4a>
        __asm volatile
 8000a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a5e:	f383 8811 	msr	BASEPRI, r3
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	603b      	str	r3, [r7, #0]
    }
 8000a6c:	bf00      	nop
 8000a6e:	bf00      	nop
 8000a70:	e7fd      	b.n	8000a6e <xTaskIncrementTick+0x46>
 8000a72:	4b41      	ldr	r3, [pc, #260]	@ (8000b78 <xTaskIncrementTick+0x150>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b40      	ldr	r3, [pc, #256]	@ (8000b7c <xTaskIncrementTick+0x154>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8000b78 <xTaskIncrementTick+0x150>)
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4a3e      	ldr	r2, [pc, #248]	@ (8000b7c <xTaskIncrementTick+0x154>)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	4b3e      	ldr	r3, [pc, #248]	@ (8000b80 <xTaskIncrementTick+0x158>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8000b80 <xTaskIncrementTick+0x158>)
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	f000 f984 	bl	8000d9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000a94:	4b3b      	ldr	r3, [pc, #236]	@ (8000b84 <xTaskIncrementTick+0x15c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d348      	bcc.n	8000b30 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a9e:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <xTaskIncrementTick+0x150>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d104      	bne.n	8000ab2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000aa8:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <xTaskIncrementTick+0x15c>)
 8000aaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000aae:	601a      	str	r2, [r3, #0]
                    break;
 8000ab0:	e03e      	b.n	8000b30 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <xTaskIncrementTick+0x150>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d203      	bcs.n	8000ad2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000aca:	4a2e      	ldr	r2, [pc, #184]	@ (8000b84 <xTaskIncrementTick+0x15c>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000ad0:	e02e      	b.n	8000b30 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd28 	bl	800052c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d004      	beq.n	8000aee <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd1f 	bl	800052c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af2:	2201      	movs	r2, #1
 8000af4:	409a      	lsls	r2, r3
 8000af6:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <xTaskIncrementTick+0x160>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	4a22      	ldr	r2, [pc, #136]	@ (8000b88 <xTaskIncrementTick+0x160>)
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b04:	4613      	mov	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b8c <xTaskIncrementTick+0x164>)
 8000b0e:	441a      	add	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	3304      	adds	r3, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4610      	mov	r0, r2
 8000b18:	f7ff fce4 	bl	80004e4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b20:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <xTaskIncrementTick+0x168>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d3b9      	bcc.n	8000a9e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b2e:	e7b6      	b.n	8000a9e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <xTaskIncrementTick+0x168>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b36:	4915      	ldr	r1, [pc, #84]	@ (8000b8c <xTaskIncrementTick+0x164>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	440b      	add	r3, r1
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d901      	bls.n	8000b4c <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <xTaskIncrementTick+0x16c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d007      	beq.n	8000b64 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e004      	b.n	8000b64 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <xTaskIncrementTick+0x170>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <xTaskIncrementTick+0x170>)
 8000b62:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000b64:	697b      	ldr	r3, [r7, #20]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000019c 	.word	0x2000019c
 8000b74:	20000178 	.word	0x20000178
 8000b78:	2000012c 	.word	0x2000012c
 8000b7c:	20000130 	.word	0x20000130
 8000b80:	2000018c 	.word	0x2000018c
 8000b84:	20000194 	.word	0x20000194
 8000b88:	2000017c 	.word	0x2000017c
 8000b8c:	20000078 	.word	0x20000078
 8000b90:	20000074 	.word	0x20000074
 8000b94:	20000188 	.word	0x20000188
 8000b98:	20000184 	.word	0x20000184

08000b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <vTaskSwitchContext+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000baa:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <vTaskSwitchContext+0xb4>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000bb0:	e045      	b.n	8000c3e <vTaskSwitchContext+0xa2>
        xYieldPending = pdFALSE;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <vTaskSwitchContext+0xb4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <vTaskSwitchContext+0xb8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	fab3 f383 	clz	r3, r3
 8000bc4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	f1c3 031f 	rsb	r3, r3, #31
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	4922      	ldr	r1, [pc, #136]	@ (8000c58 <vTaskSwitchContext+0xbc>)
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10b      	bne.n	8000bfa <vTaskSwitchContext+0x5e>
        __asm volatile
 8000be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000be6:	f383 8811 	msr	BASEPRI, r3
 8000bea:	f3bf 8f6f 	isb	sy
 8000bee:	f3bf 8f4f 	dsb	sy
 8000bf2:	607b      	str	r3, [r7, #4]
    }
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <vTaskSwitchContext+0x5a>
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <vTaskSwitchContext+0xbc>)
 8000c06:	4413      	add	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d104      	bne.n	8000c2a <vTaskSwitchContext+0x8e>
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <vTaskSwitchContext+0xc0>)
 8000c32:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <vTaskSwitchContext+0xc0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	334c      	adds	r3, #76	@ 0x4c
 8000c3a:	4a09      	ldr	r2, [pc, #36]	@ (8000c60 <vTaskSwitchContext+0xc4>)
 8000c3c:	6013      	str	r3, [r2, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000019c 	.word	0x2000019c
 8000c50:	20000188 	.word	0x20000188
 8000c54:	2000017c 	.word	0x2000017c
 8000c58:	20000078 	.word	0x20000078
 8000c5c:	20000074 	.word	0x20000074
 8000c60:	20000008 	.word	0x20000008

08000c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000c6c:	f000 f852 	bl	8000d14 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <prvIdleTask+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d9f9      	bls.n	8000c6c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <prvIdleTask+0x2c>)
 8000c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	f3bf 8f4f 	dsb	sy
 8000c84:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000c88:	e7f0      	b.n	8000c6c <prvIdleTask+0x8>
 8000c8a:	bf00      	nop
 8000c8c:	20000078 	.word	0x20000078
 8000c90:	e000ed04 	.word	0xe000ed04

08000c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	e00c      	b.n	8000cba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <prvInitialiseTaskLists+0x60>)
 8000cac:	4413      	add	r3, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fbeb 	bl	800048a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b06      	cmp	r3, #6
 8000cbe:	d9ef      	bls.n	8000ca0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000cc0:	480d      	ldr	r0, [pc, #52]	@ (8000cf8 <prvInitialiseTaskLists+0x64>)
 8000cc2:	f7ff fbe2 	bl	800048a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <prvInitialiseTaskLists+0x68>)
 8000cc8:	f7ff fbdf 	bl	800048a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <prvInitialiseTaskLists+0x6c>)
 8000cce:	f7ff fbdc 	bl	800048a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000cd2:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <prvInitialiseTaskLists+0x70>)
 8000cd4:	f7ff fbd9 	bl	800048a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000cd8:	480b      	ldr	r0, [pc, #44]	@ (8000d08 <prvInitialiseTaskLists+0x74>)
 8000cda:	f7ff fbd6 	bl	800048a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <prvInitialiseTaskLists+0x78>)
 8000ce0:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <prvInitialiseTaskLists+0x64>)
 8000ce2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <prvInitialiseTaskLists+0x7c>)
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <prvInitialiseTaskLists+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000078 	.word	0x20000078
 8000cf8:	20000104 	.word	0x20000104
 8000cfc:	20000118 	.word	0x20000118
 8000d00:	20000134 	.word	0x20000134
 8000d04:	20000148 	.word	0x20000148
 8000d08:	20000160 	.word	0x20000160
 8000d0c:	2000012c 	.word	0x2000012c
 8000d10:	20000130 	.word	0x20000130

08000d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d1a:	e019      	b.n	8000d50 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000d1c:	f000 f98e 	bl	800103c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <prvCheckTasksWaitingTermination+0x50>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fbfd 	bl	800052c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <prvCheckTasksWaitingTermination+0x54>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a0b      	ldr	r2, [pc, #44]	@ (8000d68 <prvCheckTasksWaitingTermination+0x54>)
 8000d3a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <prvCheckTasksWaitingTermination+0x58>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <prvCheckTasksWaitingTermination+0x58>)
 8000d44:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000d46:	f000 f9ab 	bl	80010a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f810 	bl	8000d70 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <prvCheckTasksWaitingTermination+0x58>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e1      	bne.n	8000d1c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000148 	.word	0x20000148
 8000d68:	20000174 	.word	0x20000174
 8000d6c:	2000015c 	.word	0x2000015c

08000d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	334c      	adds	r3, #76	@ 0x4c
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fc4d 	bl	800161c <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fb0e 	bl	80013a8 <vPortFree>
                vPortFree( pxTCB );
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 fb0b 	bl	80013a8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000da0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <prvResetNextTaskUnblockTime+0x30>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d104      	bne.n	8000db4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <prvResetNextTaskUnblockTime+0x34>)
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000db2:	e005      	b.n	8000dc0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <prvResetNextTaskUnblockTime+0x30>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <prvResetNextTaskUnblockTime+0x34>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2000012c 	.word	0x2000012c
 8000dd0:	20000194 	.word	0x20000194

08000dd4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3b04      	subs	r3, #4
 8000de4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000dec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3b04      	subs	r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	f023 0201 	bic.w	r2, r3, #1
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3b04      	subs	r3, #4
 8000e02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000e04:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <pxPortInitialiseStack+0x64>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3b14      	subs	r3, #20
 8000e0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	3b04      	subs	r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f06f 0202 	mvn.w	r2, #2
 8000e22:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3b20      	subs	r3, #32
 8000e28:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	08000e3d 	.word	0x08000e3d

08000e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <prvTaskExitError+0x58>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e4e:	d00b      	beq.n	8000e68 <prvTaskExitError+0x2c>
        __asm volatile
 8000e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e54:	f383 8811 	msr	BASEPRI, r3
 8000e58:	f3bf 8f6f 	isb	sy
 8000e5c:	f3bf 8f4f 	dsb	sy
 8000e60:	60fb      	str	r3, [r7, #12]
    }
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <prvTaskExitError+0x28>
        __asm volatile
 8000e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e6c:	f383 8811 	msr	BASEPRI, r3
 8000e70:	f3bf 8f6f 	isb	sy
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	60bb      	str	r3, [r7, #8]
    }
 8000e7a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000e7c:	bf00      	nop
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0fc      	beq.n	8000e7e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000004 	.word	0x20000004
	...

08000ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <pxCurrentTCBConst2>)
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	6808      	ldr	r0, [r1, #0]
 8000ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eaa:	f380 8809 	msr	PSP, r0
 8000eae:	f3bf 8f6f 	isb	sy
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	f380 8811 	msr	BASEPRI, r0
 8000eba:	4770      	bx	lr
 8000ebc:	f3af 8000 	nop.w

08000ec0 <pxCurrentTCBConst2>:
 8000ec0:	20000074 	.word	0x20000074
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop

08000ec8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000ec8:	4808      	ldr	r0, [pc, #32]	@ (8000eec <prvPortStartFirstTask+0x24>)
 8000eca:	6800      	ldr	r0, [r0, #0]
 8000ecc:	6800      	ldr	r0, [r0, #0]
 8000ece:	f380 8808 	msr	MSP, r0
 8000ed2:	f04f 0000 	mov.w	r0, #0
 8000ed6:	f380 8814 	msr	CONTROL, r0
 8000eda:	b662      	cpsie	i
 8000edc:	b661      	cpsie	f
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	f3bf 8f6f 	isb	sy
 8000ee6:	df00      	svc	0
 8000ee8:	bf00      	nop
 8000eea:	0000      	.short	0x0000
 8000eec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop

08000ef4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000efa:	4b47      	ldr	r3, [pc, #284]	@ (8001018 <xPortStartScheduler+0x124>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a47      	ldr	r2, [pc, #284]	@ (800101c <xPortStartScheduler+0x128>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d10b      	bne.n	8000f1c <xPortStartScheduler+0x28>
        __asm volatile
 8000f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f08:	f383 8811 	msr	BASEPRI, r3
 8000f0c:	f3bf 8f6f 	isb	sy
 8000f10:	f3bf 8f4f 	dsb	sy
 8000f14:	60fb      	str	r3, [r7, #12]
    }
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001018 <xPortStartScheduler+0x124>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a3f      	ldr	r2, [pc, #252]	@ (8001020 <xPortStartScheduler+0x12c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <xPortStartScheduler+0x4a>
        __asm volatile
 8000f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f2a:	f383 8811 	msr	BASEPRI, r3
 8000f2e:	f3bf 8f6f 	isb	sy
 8000f32:	f3bf 8f4f 	dsb	sy
 8000f36:	613b      	str	r3, [r7, #16]
    }
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	e7fd      	b.n	8000f3a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000f3e:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <xPortStartScheduler+0x130>)
 8000f40:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	22ff      	movs	r2, #255	@ 0xff
 8000f4e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b31      	ldr	r3, [pc, #196]	@ (8001028 <xPortStartScheduler+0x134>)
 8000f64:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000f66:	4b31      	ldr	r3, [pc, #196]	@ (800102c <xPortStartScheduler+0x138>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000f6c:	e009      	b.n	8000f82 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <xPortStartScheduler+0x138>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	4a2d      	ldr	r2, [pc, #180]	@ (800102c <xPortStartScheduler+0x138>)
 8000f76:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8a:	2b80      	cmp	r3, #128	@ 0x80
 8000f8c:	d0ef      	beq.n	8000f6e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000f8e:	4b27      	ldr	r3, [pc, #156]	@ (800102c <xPortStartScheduler+0x138>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d00b      	beq.n	8000fb2 <xPortStartScheduler+0xbe>
        __asm volatile
 8000f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f9e:	f383 8811 	msr	BASEPRI, r3
 8000fa2:	f3bf 8f6f 	isb	sy
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	60bb      	str	r3, [r7, #8]
    }
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	e7fd      	b.n	8000fae <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <xPortStartScheduler+0x138>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <xPortStartScheduler+0x138>)
 8000fba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <xPortStartScheduler+0x138>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000fc4:	4a19      	ldr	r2, [pc, #100]	@ (800102c <xPortStartScheduler+0x138>)
 8000fc6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <xPortStartScheduler+0x13c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <xPortStartScheduler+0x13c>)
 8000fd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <xPortStartScheduler+0x13c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a13      	ldr	r2, [pc, #76]	@ (8001030 <xPortStartScheduler+0x13c>)
 8000fe2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000fe6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000fe8:	f000 f8e0 	bl	80011ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <xPortStartScheduler+0x140>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000ff2:	f000 f8ff 	bl	80011f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <xPortStartScheduler+0x144>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <xPortStartScheduler+0x144>)
 8000ffc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001000:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001002:	f7ff ff61 	bl	8000ec8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001006:	f7ff fdc9 	bl	8000b9c <vTaskSwitchContext>
    prvTaskExitError();
 800100a:	f7ff ff17 	bl	8000e3c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	410fc271 	.word	0x410fc271
 8001020:	410fc270 	.word	0x410fc270
 8001024:	e000e400 	.word	0xe000e400
 8001028:	200001a0 	.word	0x200001a0
 800102c:	200001a4 	.word	0x200001a4
 8001030:	e000ed20 	.word	0xe000ed20
 8001034:	20000004 	.word	0x20000004
 8001038:	e000ef34 	.word	0xe000ef34

0800103c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
        __asm volatile
 8001042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001046:	f383 8811 	msr	BASEPRI, r3
 800104a:	f3bf 8f6f 	isb	sy
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	607b      	str	r3, [r7, #4]
    }
 8001054:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <vPortEnterCritical+0x5c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <vPortEnterCritical+0x5c>)
 800105e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <vPortEnterCritical+0x5c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d110      	bne.n	800108a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <vPortEnterCritical+0x60>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <vPortEnterCritical+0x4e>
        __asm volatile
 8001072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001076:	f383 8811 	msr	BASEPRI, r3
 800107a:	f3bf 8f6f 	isb	sy
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	603b      	str	r3, [r7, #0]
    }
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <vPortEnterCritical+0x4a>
    }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000004 	.word	0x20000004
 800109c:	e000ed04 	.word	0xe000ed04

080010a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <vPortExitCritical+0x50>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10b      	bne.n	80010c6 <vPortExitCritical+0x26>
        __asm volatile
 80010ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b2:	f383 8811 	msr	BASEPRI, r3
 80010b6:	f3bf 8f6f 	isb	sy
 80010ba:	f3bf 8f4f 	dsb	sy
 80010be:	607b      	str	r3, [r7, #4]
    }
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	e7fd      	b.n	80010c2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <vPortExitCritical+0x50>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <vPortExitCritical+0x50>)
 80010ce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <vPortExitCritical+0x50>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <vPortExitCritical+0x44>
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80010e2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20000004 	.word	0x20000004
	...

08001100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001100:	f3ef 8009 	mrs	r0, PSP
 8001104:	f3bf 8f6f 	isb	sy
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <pxCurrentTCBConst>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	f01e 0f10 	tst.w	lr, #16
 8001110:	bf08      	it	eq
 8001112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111a:	6010      	str	r0, [r2, #0]
 800111c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001124:	f380 8811 	msr	BASEPRI, r0
 8001128:	f3bf 8f4f 	dsb	sy
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f7ff fd34 	bl	8000b9c <vTaskSwitchContext>
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	f380 8811 	msr	BASEPRI, r0
 800113c:	bc09      	pop	{r0, r3}
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	6808      	ldr	r0, [r1, #0]
 8001142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001146:	f01e 0f10 	tst.w	lr, #16
 800114a:	bf08      	it	eq
 800114c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001150:	f380 8809 	msr	PSP, r0
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w

08001160 <pxCurrentTCBConst>:
 8001160:	20000074 	.word	0x20000074
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop

08001168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
        __asm volatile
 800116e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001172:	f383 8811 	msr	BASEPRI, r3
 8001176:	f3bf 8f6f 	isb	sy
 800117a:	f3bf 8f4f 	dsb	sy
 800117e:	607b      	str	r3, [r7, #4]
    }
 8001180:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001182:	f7ff fc51 	bl	8000a28 <xTaskIncrementTick>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SysTick_Handler+0x40>)
 800118e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f383 8811 	msr	BASEPRI, r3
    }
 800119e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	e000ed04 	.word	0xe000ed04

080011ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <vPortSetupTimerInterrupt+0x34>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <vPortSetupTimerInterrupt+0x38>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <vPortSetupTimerInterrupt+0x3c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <vPortSetupTimerInterrupt+0x40>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	099b      	lsrs	r3, r3, #6
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <vPortSetupTimerInterrupt+0x44>)
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <vPortSetupTimerInterrupt+0x34>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010
 80011e4:	e000e018 	.word	0xe000e018
 80011e8:	20000000 	.word	0x20000000
 80011ec:	10624dd3 	.word	0x10624dd3
 80011f0:	e000e014 	.word	0xe000e014

080011f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80011f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8001204 <vPortEnableVFP+0x10>
 80011f8:	6801      	ldr	r1, [r0, #0]
 80011fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80011fe:	6001      	str	r1, [r0, #0]
 8001200:	4770      	bx	lr
 8001202:	0000      	.short	0x0000
 8001204:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop

0800120c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8001218:	f7ff fb5a 	bl	80008d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800121c:	4b5c      	ldr	r3, [pc, #368]	@ (8001390 <pvPortMalloc+0x184>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001224:	f000 f924 	bl	8001470 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001228:	4b5a      	ldr	r3, [pc, #360]	@ (8001394 <pvPortMalloc+0x188>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 8095 	bne.w	8001360 <pvPortMalloc+0x154>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01e      	beq.n	800127a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 800123c:	2208      	movs	r2, #8
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	2b00      	cmp	r3, #0
 800124c:	d015      	beq.n	800127a <pvPortMalloc+0x6e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f023 0307 	bic.w	r3, r3, #7
 8001254:	3308      	adds	r3, #8
 8001256:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <pvPortMalloc+0x6e>
        __asm volatile
 8001262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001266:	f383 8811 	msr	BASEPRI, r3
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	f3bf 8f4f 	dsb	sy
 8001272:	617b      	str	r3, [r7, #20]
    }
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	e7fd      	b.n	8001276 <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d06f      	beq.n	8001360 <pvPortMalloc+0x154>
 8001280:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <pvPortMalloc+0x18c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d86a      	bhi.n	8001360 <pvPortMalloc+0x154>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 800128a:	4b44      	ldr	r3, [pc, #272]	@ (800139c <pvPortMalloc+0x190>)
 800128c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800128e:	4b43      	ldr	r3, [pc, #268]	@ (800139c <pvPortMalloc+0x190>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001294:	e004      	b.n	80012a0 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d903      	bls.n	80012b2 <pvPortMalloc+0xa6>
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f1      	bne.n	8001296 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 80012b2:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <pvPortMalloc+0x184>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d051      	beq.n	8001360 <pvPortMalloc+0x154>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2208      	movs	r2, #8
 80012c2:	4413      	add	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	2308      	movs	r3, #8
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	429a      	cmp	r2, r3
 80012dc:	d920      	bls.n	8001320 <pvPortMalloc+0x114>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80012de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00b      	beq.n	8001308 <pvPortMalloc+0xfc>
        __asm volatile
 80012f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012f4:	f383 8811 	msr	BASEPRI, r3
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	f3bf 8f4f 	dsb	sy
 8001300:	613b      	str	r3, [r7, #16]
    }
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <pvPortMalloc+0xf8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800131a:	69b8      	ldr	r0, [r7, #24]
 800131c:	f000 f90a 	bl	8001534 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <pvPortMalloc+0x18c>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <pvPortMalloc+0x18c>)
 800132c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <pvPortMalloc+0x18c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <pvPortMalloc+0x194>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d203      	bcs.n	8001342 <pvPortMalloc+0x136>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <pvPortMalloc+0x18c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <pvPortMalloc+0x194>)
 8001340:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <pvPortMalloc+0x188>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	431a      	orrs	r2, r3
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <pvPortMalloc+0x198>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <pvPortMalloc+0x198>)
 800135e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001360:	f7ff fac4 	bl	80008ec <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <pvPortMalloc+0x17a>
        __asm volatile
 800136e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	60fb      	str	r3, [r7, #12]
    }
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	e7fd      	b.n	8001382 <pvPortMalloc+0x176>
    return pvReturn;
 8001386:	69fb      	ldr	r3, [r7, #28]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20003db0 	.word	0x20003db0
 8001394:	20003dc4 	.word	0x20003dc4
 8001398:	20003db4 	.word	0x20003db4
 800139c:	20003da8 	.word	0x20003da8
 80013a0:	20003db8 	.word	0x20003db8
 80013a4:	20003dbc 	.word	0x20003dbc

080013a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d04f      	beq.n	800145a <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80013ba:	2308      	movs	r3, #8
 80013bc:	425b      	negs	r3, r3
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <vPortFree+0xbc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10b      	bne.n	80013ee <vPortFree+0x46>
        __asm volatile
 80013d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f3bf 8f4f 	dsb	sy
 80013e6:	60fb      	str	r3, [r7, #12]
    }
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	e7fd      	b.n	80013ea <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <vPortFree+0x66>
        __asm volatile
 80013f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013fa:	f383 8811 	msr	BASEPRI, r3
 80013fe:	f3bf 8f6f 	isb	sy
 8001402:	f3bf 8f4f 	dsb	sy
 8001406:	60bb      	str	r3, [r7, #8]
    }
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	e7fd      	b.n	800140a <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <vPortFree+0xbc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d01e      	beq.n	800145a <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d11a      	bne.n	800145a <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <vPortFree+0xbc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	43db      	mvns	r3, r3
 800142e:	401a      	ands	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001434:	f7ff fa4c 	bl	80008d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <vPortFree+0xc0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4413      	add	r3, r2
 8001442:	4a09      	ldr	r2, [pc, #36]	@ (8001468 <vPortFree+0xc0>)
 8001444:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001446:	6938      	ldr	r0, [r7, #16]
 8001448:	f000 f874 	bl	8001534 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <vPortFree+0xc4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a06      	ldr	r2, [pc, #24]	@ (800146c <vPortFree+0xc4>)
 8001454:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001456:	f7ff fa49 	bl	80008ec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20003dc4 	.word	0x20003dc4
 8001468:	20003db4 	.word	0x20003db4
 800146c:	20003dc0 	.word	0x20003dc0

08001470 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001476:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800147a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800147c:	4b27      	ldr	r3, [pc, #156]	@ (800151c <prvHeapInit+0xac>)
 800147e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00c      	beq.n	80014a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3307      	adds	r3, #7
 800148e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f023 0307 	bic.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	4a1f      	ldr	r2, [pc, #124]	@ (800151c <prvHeapInit+0xac>)
 80014a0:	4413      	add	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80014a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001520 <prvHeapInit+0xb0>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <prvHeapInit+0xb0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	4413      	add	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80014bc:	2208      	movs	r2, #8
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4a15      	ldr	r2, [pc, #84]	@ (8001524 <prvHeapInit+0xb4>)
 80014d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <prvHeapInit+0xb4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <prvHeapInit+0xb4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	1ad2      	subs	r2, r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <prvHeapInit+0xb4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <prvHeapInit+0xb8>)
 80014fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a09      	ldr	r2, [pc, #36]	@ (800152c <prvHeapInit+0xbc>)
 8001506:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <prvHeapInit+0xc0>)
 800150a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	200001a8 	.word	0x200001a8
 8001520:	20003da8 	.word	0x20003da8
 8001524:	20003db0 	.word	0x20003db0
 8001528:	20003db8 	.word	0x20003db8
 800152c:	20003db4 	.word	0x20003db4
 8001530:	20003dc4 	.word	0x20003dc4

08001534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <prvInsertBlockIntoFreeList+0xac>)
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e002      	b.n	8001548 <prvInsertBlockIntoFreeList+0x14>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d8f7      	bhi.n	8001542 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d108      	bne.n	8001576 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	441a      	add	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	441a      	add	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d118      	bne.n	80015bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <prvInsertBlockIntoFreeList+0xb0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d00d      	beq.n	80015b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	441a      	add	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e008      	b.n	80015c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <prvInsertBlockIntoFreeList+0xb0>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e003      	b.n	80015c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d002      	beq.n	80015d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20003da8 	.word	0x20003da8
 80015e4:	20003db0 	.word	0x20003db0

080015e8 <memset>:
 80015e8:	4402      	add	r2, r0
 80015ea:	4603      	mov	r3, r0
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d100      	bne.n	80015f2 <memset+0xa>
 80015f0:	4770      	bx	lr
 80015f2:	f803 1b01 	strb.w	r1, [r3], #1
 80015f6:	e7f9      	b.n	80015ec <memset+0x4>

080015f8 <strupr>:
 80015f8:	b510      	push	{r4, lr}
 80015fa:	4c07      	ldr	r4, [pc, #28]	@ (8001618 <strupr+0x20>)
 80015fc:	1e42      	subs	r2, r0, #1
 80015fe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001602:	b903      	cbnz	r3, 8001606 <strupr+0xe>
 8001604:	bd10      	pop	{r4, pc}
 8001606:	5ce1      	ldrb	r1, [r4, r3]
 8001608:	f001 0103 	and.w	r1, r1, #3
 800160c:	2902      	cmp	r1, #2
 800160e:	bf08      	it	eq
 8001610:	3b20      	subeq	r3, #32
 8001612:	7013      	strb	r3, [r2, #0]
 8001614:	e7f3      	b.n	80015fe <strupr+0x6>
 8001616:	bf00      	nop
 8001618:	08001815 	.word	0x08001815

0800161c <_reclaim_reent>:
 800161c:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <_reclaim_reent+0xb8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4283      	cmp	r3, r0
 8001622:	b570      	push	{r4, r5, r6, lr}
 8001624:	4604      	mov	r4, r0
 8001626:	d053      	beq.n	80016d0 <_reclaim_reent+0xb4>
 8001628:	69c3      	ldr	r3, [r0, #28]
 800162a:	b31b      	cbz	r3, 8001674 <_reclaim_reent+0x58>
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	b163      	cbz	r3, 800164a <_reclaim_reent+0x2e>
 8001630:	2500      	movs	r5, #0
 8001632:	69e3      	ldr	r3, [r4, #28]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	5959      	ldr	r1, [r3, r5]
 8001638:	b9b1      	cbnz	r1, 8001668 <_reclaim_reent+0x4c>
 800163a:	3504      	adds	r5, #4
 800163c:	2d80      	cmp	r5, #128	@ 0x80
 800163e:	d1f8      	bne.n	8001632 <_reclaim_reent+0x16>
 8001640:	69e3      	ldr	r3, [r4, #28]
 8001642:	4620      	mov	r0, r4
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	f000 f86d 	bl	8001724 <_free_r>
 800164a:	69e3      	ldr	r3, [r4, #28]
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	b111      	cbz	r1, 8001656 <_reclaim_reent+0x3a>
 8001650:	4620      	mov	r0, r4
 8001652:	f000 f867 	bl	8001724 <_free_r>
 8001656:	69e3      	ldr	r3, [r4, #28]
 8001658:	689d      	ldr	r5, [r3, #8]
 800165a:	b15d      	cbz	r5, 8001674 <_reclaim_reent+0x58>
 800165c:	4629      	mov	r1, r5
 800165e:	4620      	mov	r0, r4
 8001660:	682d      	ldr	r5, [r5, #0]
 8001662:	f000 f85f 	bl	8001724 <_free_r>
 8001666:	e7f8      	b.n	800165a <_reclaim_reent+0x3e>
 8001668:	680e      	ldr	r6, [r1, #0]
 800166a:	4620      	mov	r0, r4
 800166c:	f000 f85a 	bl	8001724 <_free_r>
 8001670:	4631      	mov	r1, r6
 8001672:	e7e1      	b.n	8001638 <_reclaim_reent+0x1c>
 8001674:	6961      	ldr	r1, [r4, #20]
 8001676:	b111      	cbz	r1, 800167e <_reclaim_reent+0x62>
 8001678:	4620      	mov	r0, r4
 800167a:	f000 f853 	bl	8001724 <_free_r>
 800167e:	69e1      	ldr	r1, [r4, #28]
 8001680:	b111      	cbz	r1, 8001688 <_reclaim_reent+0x6c>
 8001682:	4620      	mov	r0, r4
 8001684:	f000 f84e 	bl	8001724 <_free_r>
 8001688:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800168a:	b111      	cbz	r1, 8001692 <_reclaim_reent+0x76>
 800168c:	4620      	mov	r0, r4
 800168e:	f000 f849 	bl	8001724 <_free_r>
 8001692:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001694:	b111      	cbz	r1, 800169c <_reclaim_reent+0x80>
 8001696:	4620      	mov	r0, r4
 8001698:	f000 f844 	bl	8001724 <_free_r>
 800169c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800169e:	b111      	cbz	r1, 80016a6 <_reclaim_reent+0x8a>
 80016a0:	4620      	mov	r0, r4
 80016a2:	f000 f83f 	bl	8001724 <_free_r>
 80016a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80016a8:	b111      	cbz	r1, 80016b0 <_reclaim_reent+0x94>
 80016aa:	4620      	mov	r0, r4
 80016ac:	f000 f83a 	bl	8001724 <_free_r>
 80016b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80016b2:	b111      	cbz	r1, 80016ba <_reclaim_reent+0x9e>
 80016b4:	4620      	mov	r0, r4
 80016b6:	f000 f835 	bl	8001724 <_free_r>
 80016ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80016bc:	b111      	cbz	r1, 80016c4 <_reclaim_reent+0xa8>
 80016be:	4620      	mov	r0, r4
 80016c0:	f000 f830 	bl	8001724 <_free_r>
 80016c4:	6a23      	ldr	r3, [r4, #32]
 80016c6:	b11b      	cbz	r3, 80016d0 <_reclaim_reent+0xb4>
 80016c8:	4620      	mov	r0, r4
 80016ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80016ce:	4718      	bx	r3
 80016d0:	bd70      	pop	{r4, r5, r6, pc}
 80016d2:	bf00      	nop
 80016d4:	20000008 	.word	0x20000008

080016d8 <__libc_init_array>:
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	4d0d      	ldr	r5, [pc, #52]	@ (8001710 <__libc_init_array+0x38>)
 80016dc:	4c0d      	ldr	r4, [pc, #52]	@ (8001714 <__libc_init_array+0x3c>)
 80016de:	1b64      	subs	r4, r4, r5
 80016e0:	10a4      	asrs	r4, r4, #2
 80016e2:	2600      	movs	r6, #0
 80016e4:	42a6      	cmp	r6, r4
 80016e6:	d109      	bne.n	80016fc <__libc_init_array+0x24>
 80016e8:	4d0b      	ldr	r5, [pc, #44]	@ (8001718 <__libc_init_array+0x40>)
 80016ea:	4c0c      	ldr	r4, [pc, #48]	@ (800171c <__libc_init_array+0x44>)
 80016ec:	f000 f870 	bl	80017d0 <_init>
 80016f0:	1b64      	subs	r4, r4, r5
 80016f2:	10a4      	asrs	r4, r4, #2
 80016f4:	2600      	movs	r6, #0
 80016f6:	42a6      	cmp	r6, r4
 80016f8:	d105      	bne.n	8001706 <__libc_init_array+0x2e>
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
 80016fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001700:	4798      	blx	r3
 8001702:	3601      	adds	r6, #1
 8001704:	e7ee      	b.n	80016e4 <__libc_init_array+0xc>
 8001706:	f855 3b04 	ldr.w	r3, [r5], #4
 800170a:	4798      	blx	r3
 800170c:	3601      	adds	r6, #1
 800170e:	e7f2      	b.n	80016f6 <__libc_init_array+0x1e>
 8001710:	08001918 	.word	0x08001918
 8001714:	08001918 	.word	0x08001918
 8001718:	08001918 	.word	0x08001918
 800171c:	0800191c 	.word	0x0800191c

08001720 <__retarget_lock_acquire_recursive>:
 8001720:	4770      	bx	lr

08001722 <__retarget_lock_release_recursive>:
 8001722:	4770      	bx	lr

08001724 <_free_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4605      	mov	r5, r0
 8001728:	2900      	cmp	r1, #0
 800172a:	d041      	beq.n	80017b0 <_free_r+0x8c>
 800172c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001730:	1f0c      	subs	r4, r1, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfb8      	it	lt
 8001736:	18e4      	addlt	r4, r4, r3
 8001738:	f000 f83e 	bl	80017b8 <__malloc_lock>
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_free_r+0x90>)
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	b933      	cbnz	r3, 8001750 <_free_r+0x2c>
 8001742:	6063      	str	r3, [r4, #4]
 8001744:	6014      	str	r4, [r2, #0]
 8001746:	4628      	mov	r0, r5
 8001748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800174c:	f000 b83a 	b.w	80017c4 <__malloc_unlock>
 8001750:	42a3      	cmp	r3, r4
 8001752:	d908      	bls.n	8001766 <_free_r+0x42>
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	1821      	adds	r1, r4, r0
 8001758:	428b      	cmp	r3, r1
 800175a:	bf01      	itttt	eq
 800175c:	6819      	ldreq	r1, [r3, #0]
 800175e:	685b      	ldreq	r3, [r3, #4]
 8001760:	1809      	addeq	r1, r1, r0
 8001762:	6021      	streq	r1, [r4, #0]
 8001764:	e7ed      	b.n	8001742 <_free_r+0x1e>
 8001766:	461a      	mov	r2, r3
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	b10b      	cbz	r3, 8001770 <_free_r+0x4c>
 800176c:	42a3      	cmp	r3, r4
 800176e:	d9fa      	bls.n	8001766 <_free_r+0x42>
 8001770:	6811      	ldr	r1, [r2, #0]
 8001772:	1850      	adds	r0, r2, r1
 8001774:	42a0      	cmp	r0, r4
 8001776:	d10b      	bne.n	8001790 <_free_r+0x6c>
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	4401      	add	r1, r0
 800177c:	1850      	adds	r0, r2, r1
 800177e:	4283      	cmp	r3, r0
 8001780:	6011      	str	r1, [r2, #0]
 8001782:	d1e0      	bne.n	8001746 <_free_r+0x22>
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	6053      	str	r3, [r2, #4]
 800178a:	4408      	add	r0, r1
 800178c:	6010      	str	r0, [r2, #0]
 800178e:	e7da      	b.n	8001746 <_free_r+0x22>
 8001790:	d902      	bls.n	8001798 <_free_r+0x74>
 8001792:	230c      	movs	r3, #12
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	e7d6      	b.n	8001746 <_free_r+0x22>
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	1821      	adds	r1, r4, r0
 800179c:	428b      	cmp	r3, r1
 800179e:	bf04      	itt	eq
 80017a0:	6819      	ldreq	r1, [r3, #0]
 80017a2:	685b      	ldreq	r3, [r3, #4]
 80017a4:	6063      	str	r3, [r4, #4]
 80017a6:	bf04      	itt	eq
 80017a8:	1809      	addeq	r1, r1, r0
 80017aa:	6021      	streq	r1, [r4, #0]
 80017ac:	6054      	str	r4, [r2, #4]
 80017ae:	e7ca      	b.n	8001746 <_free_r+0x22>
 80017b0:	bd38      	pop	{r3, r4, r5, pc}
 80017b2:	bf00      	nop
 80017b4:	20003f04 	.word	0x20003f04

080017b8 <__malloc_lock>:
 80017b8:	4801      	ldr	r0, [pc, #4]	@ (80017c0 <__malloc_lock+0x8>)
 80017ba:	f7ff bfb1 	b.w	8001720 <__retarget_lock_acquire_recursive>
 80017be:	bf00      	nop
 80017c0:	20003f00 	.word	0x20003f00

080017c4 <__malloc_unlock>:
 80017c4:	4801      	ldr	r0, [pc, #4]	@ (80017cc <__malloc_unlock+0x8>)
 80017c6:	f7ff bfac 	b.w	8001722 <__retarget_lock_release_recursive>
 80017ca:	bf00      	nop
 80017cc:	20003f00 	.word	0x20003f00

080017d0 <_init>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	bf00      	nop
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr

080017dc <_fini>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	bf00      	nop
 80017e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017e2:	bc08      	pop	{r3}
 80017e4:	469e      	mov	lr, r3
 80017e6:	4770      	bx	lr
